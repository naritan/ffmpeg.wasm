!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.FFmpegWASM=t():e.FFmpegWASM=t()}(self,(()=>(()=>{var e={454:e=>{function t(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}t.keys=()=>[],t.resolve=t,t.id=454,e.exports=t}},t={};function r(a){var o=t[a];if(void 0!==o)return o.exports;var s=t[a]={exports:{}};return e[a](s,s.exports,r),s.exports}return r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e="https://unpkg.com/@ffmpeg/core@0.12.10/dist/umd/ffmpeg-core.js";var t;!function(e){e.LOAD="LOAD",e.EXEC="EXEC",e.FFPROBE="FFPROBE",e.WRITE_FILE="WRITE_FILE",e.READ_FILE="READ_FILE",e.DELETE_FILE="DELETE_FILE",e.RENAME="RENAME",e.CREATE_DIR="CREATE_DIR",e.LIST_DIR="LIST_DIR",e.DELETE_DIR="DELETE_DIR",e.ERROR="ERROR",e.DOWNLOAD="DOWNLOAD",e.PROGRESS="PROGRESS",e.LOG="LOG",e.MOUNT="MOUNT",e.UNMOUNT="UNMOUNT",e.WRITE_FRAME="WRITE_FRAME",e.READ_FRAME="READ_FRAME",e.INIT_FILTER="INIT_FILTER",e.PROCESS_FRAME="PROCESS_FRAME",e.CLOSE_FILTER="CLOSE_FILTER"}(t||(t={}));const a=new Error("unknown message type"),o=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),s=(new Error("called FFmpeg.terminate()"),new Error("failed to import ffmpeg-core.js"));let n,E=null,i=null;self.onmessage=async({data:{id:c,type:f,data:l}})=>{const p=[];let R;try{if(f!==t.LOAD&&!n)throw o;switch(f){case t.LOAD:R=await(async({coreURL:a,wasmURL:o,workerURL:E})=>{const i=!n;try{a||(a=e),importScripts(a)}catch{if(a&&a!==e||(a=e.replace("/umd/","/esm/")),self.createFFmpegCore=(await r(454)(a)).default,!self.createFFmpegCore)throw s}const c=a,f=o||a.replace(/.js$/g,".wasm"),l=E||a.replace(/.js$/g,".worker.js");return n=await self.createFFmpegCore({mainScriptUrlOrBlob:`${c}#${btoa(JSON.stringify({wasmURL:f,workerURL:l}))}`}),n.setLogger((e=>self.postMessage({type:t.LOG,data:e}))),n.setProgress((e=>self.postMessage({type:t.PROGRESS,data:e}))),i})(l);break;case t.EXEC:R=(({args:e,timeout:t=-1})=>{n.setTimeout(t),n.exec(...e);const r=n.ret;return n.reset(),r})(l);break;case t.FFPROBE:R=(({args:e,timeout:t=-1})=>{n.setTimeout(t),n.ffprobe(...e);const r=n.ret;return n.reset(),r})(l);break;case t.WRITE_FILE:R=(({path:e,data:t})=>(n.FS.writeFile(e,t),!0))(l);break;case t.READ_FILE:R=(({path:e,encoding:t})=>n.FS.readFile(e,{encoding:t}))(l);break;case t.DELETE_FILE:R=(({path:e})=>(n.FS.unlink(e),!0))(l);break;case t.RENAME:R=(({oldPath:e,newPath:t})=>(n.FS.rename(e,t),!0))(l);break;case t.CREATE_DIR:R=(({path:e})=>(n.FS.mkdir(e),!0))(l);break;case t.LIST_DIR:R=(({path:e})=>{const t=n.FS.readdir(e),r=[];for(const a of t){const t=n.FS.stat(`${e}/${a}`),o=n.FS.isDir(t.mode);r.push({name:a,isDir:o})}return r})(l);break;case t.DELETE_DIR:R=(({path:e})=>(n.FS.rmdir(e),!0))(l);break;case t.MOUNT:R=(({fsType:e,options:t,mountPoint:r})=>{const a=e,o=n.FS.filesystems[a];return!!o&&(n.FS.mount(o,t,r),!0)})(l);break;case t.UNMOUNT:R=(({mountPoint:e})=>(n.FS.unmount(e),!0))(l);break;case t.WRITE_FRAME:R=(({frameData:e,timestamp:t})=>{if(!n)return!1;const r=n._malloc(e.length);n.HEAPU8.set(e,r);const a=n._write_frame(r,e.length,t);return n._free(r),0===a})(l);break;case t.READ_FRAME:R=(({width:e=1920,height:t=1080}={})=>{if(!n)return null;const r=e*t*3/2,a=n._malloc(r),o=n._malloc(8),s=n._read_frame(a,r,o);if(s<=0)return n._free(a),n._free(o),null;const E=new Uint8Array(n.HEAPU8.buffer,a,s),i=n.getValue(o,"i64"),c={frameData:new Uint8Array(E),timestamp:i};return n._free(a),n._free(o),c})(l);break;case t.INIT_FILTER:R=(({filterGraph:e,inputWidth:t,inputHeight:r,outputWidth:a,outputHeight:o})=>{if(!n)return!1;const s=n._malloc(e.length+1);n.stringToUTF8(e,s,e.length+1);const E=n._init_filter(s,t,r,a,o);return n._free(s),0===E})(l);break;case t.PROCESS_FRAME:R=(({frameData:e,timestamp:t,outputWidth:r=1920,outputHeight:a=1080})=>{if(!n)throw new Error("FFmpeg not loaded");const o=n._malloc(e.length),s=r*a*3/2,E=n._malloc(s);n.HEAPU8.set(e,o);const i=n._process_frame(o,e.length,t,E,s);if(i<=0)throw n._free(o),n._free(E),new Error("Frame processing failed");const c=new Uint8Array(n.HEAPU8.buffer,E,i),f={frameData:new Uint8Array(c),timestamp:t};return n._free(o),n._free(E),f})(l);break;case t.CLOSE_FILTER:R=!!n&&(n._close_filter(),i=null,E=[],!0);break;default:throw a}}catch(e){return void self.postMessage({id:c,type:t.ERROR,data:e.toString()})}R instanceof Uint8Array&&p.push(R.buffer),self.postMessage({id:c,type:f,data:R},p)}})(),{}})()));
//# sourceMappingURL=814.ffmpeg.js.map