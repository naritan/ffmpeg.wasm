!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.FFmpegWASM=t():e.FFmpegWASM=t()}(self,(()=>(()=>{var e={454:e=>{function t(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}t.keys=()=>[],t.resolve=t,t.id=454,e.exports=t}},t={};function r(a){var s=t[a];if(void 0!==s)return s.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,r),o.exports}return r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e="https://unpkg.com/@ffmpeg/core@0.12.10/dist/umd/ffmpeg-core.js";var t;!function(e){e.LOAD="LOAD",e.EXEC="EXEC",e.FFPROBE="FFPROBE",e.WRITE_FILE="WRITE_FILE",e.READ_FILE="READ_FILE",e.DELETE_FILE="DELETE_FILE",e.RENAME="RENAME",e.CREATE_DIR="CREATE_DIR",e.LIST_DIR="LIST_DIR",e.DELETE_DIR="DELETE_DIR",e.ERROR="ERROR",e.DOWNLOAD="DOWNLOAD",e.PROGRESS="PROGRESS",e.LOG="LOG",e.MOUNT="MOUNT",e.UNMOUNT="UNMOUNT",e.WRITE_FRAME="WRITE_FRAME",e.READ_FRAME="READ_FRAME",e.INIT_FILTER="INIT_FILTER",e.PROCESS_FRAME="PROCESS_FRAME",e.CLOSE_FILTER="CLOSE_FILTER"}(t||(t={}));const a=new Error("unknown message type"),s=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),o=(new Error("called FFmpeg.terminate()"),new Error("failed to import ffmpeg-core.js"));let E,n=[],i=null;self.onmessage=async({data:{id:p,type:R,data:c}})=>{const m=[];let F;try{if(R!==t.LOAD&&!E)throw s;switch(R){case t.LOAD:F=await(async({coreURL:a,wasmURL:s,workerURL:n})=>{const i=!E;try{a||(a=e),importScripts(a)}catch{if(a&&a!==e||(a=e.replace("/umd/","/esm/")),self.createFFmpegCore=(await r(454)(a)).default,!self.createFFmpegCore)throw o}const p=a,R=s||a.replace(/.js$/g,".wasm"),c=n||a.replace(/.js$/g,".worker.js");return E=await self.createFFmpegCore({mainScriptUrlOrBlob:`${p}#${btoa(JSON.stringify({wasmURL:R,workerURL:c}))}`}),E.setLogger((e=>self.postMessage({type:t.LOG,data:e}))),E.setProgress((e=>self.postMessage({type:t.PROGRESS,data:e}))),i})(c);break;case t.EXEC:F=(({args:e,timeout:t=-1})=>{E.setTimeout(t),E.exec(...e);const r=E.ret;return E.reset(),r})(c);break;case t.FFPROBE:F=(({args:e,timeout:t=-1})=>{E.setTimeout(t),E.ffprobe(...e);const r=E.ret;return E.reset(),r})(c);break;case t.WRITE_FILE:F=(({path:e,data:t})=>(E.FS.writeFile(e,t),!0))(c);break;case t.READ_FILE:F=(({path:e,encoding:t})=>E.FS.readFile(e,{encoding:t}))(c);break;case t.DELETE_FILE:F=(({path:e})=>(E.FS.unlink(e),!0))(c);break;case t.RENAME:F=(({oldPath:e,newPath:t})=>(E.FS.rename(e,t),!0))(c);break;case t.CREATE_DIR:F=(({path:e})=>(E.FS.mkdir(e),!0))(c);break;case t.LIST_DIR:F=(({path:e})=>{const t=E.FS.readdir(e),r=[];for(const a of t){const t=E.FS.stat(`${e}/${a}`),s=E.FS.isDir(t.mode);r.push({name:a,isDir:s})}return r})(c);break;case t.DELETE_DIR:F=(({path:e})=>(E.FS.rmdir(e),!0))(c);break;case t.MOUNT:F=(({fsType:e,options:t,mountPoint:r})=>{const a=e,s=E.FS.filesystems[a];return!!s&&(E.FS.mount(s,t,r),!0)})(c);break;case t.UNMOUNT:F=(({mountPoint:e})=>(E.FS.unmount(e),!0))(c);break;case t.WRITE_FRAME:F=(({frameData:e,timestamp:t})=>(n.push({data:e,timestamp:t}),!0))(c);break;case t.READ_FRAME:F=(()=>{if(0===n.length)return null;const e=n.shift();return{frameData:e.data,timestamp:e.timestamp}})();break;case t.INIT_FILTER:F=(({filterGraph:e,inputWidth:t,inputHeight:r,outputWidth:a,outputHeight:s})=>(i={graph:e,inputWidth:t,inputHeight:r,outputWidth:a,outputHeight:s},!0))(c);break;case t.PROCESS_FRAME:F=(({frameData:e,timestamp:t})=>({frameData:e,timestamp:t}))(c);break;case t.CLOSE_FILTER:i=null,n=[],F=!0;break;default:throw a}}catch(e){return void self.postMessage({id:p,type:t.ERROR,data:e.toString()})}F instanceof Uint8Array&&m.push(F.buffer),self.postMessage({id:p,type:R,data:F},m)}})(),{}})()));
//# sourceMappingURL=814.ffmpeg.js.map